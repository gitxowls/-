class ClassBasic():
    def __init__(self):
        self.k = None
        self.p = None
        self.c = None

    def get_value(self, cmd):
        if cmd == 'k': return self.k
        elif cmd == 'p': return self.p
        elif cmd == 'c': return self.c


class CipherOld(ClassBasic):
    """ This class is defined to make old cipher

    Parameter
    -------------
        cipher_name(str) : name of cipher

    Value
    -------------

    """

    def __init__(self, cipher_name):
        self.cipher_name = cipher_name
        super(CipherOld, self).__init__()

    def get(self, cmd):
        return self.get_value(cmd)

    def set_from_value(self, cmd, value):
        """Set value from input by value

        Parameter
        ----------
            cmd(str) : command, 1 of [k, p, c]
            value(str, int) : string or integer

        Value
        -----------
            k(int) : key
            p(str) : decrypted cipher, normal sentence
            c(str) : cipher, will be decrypted
        """
        if cmd == 'k': self.k = value
        elif cmd == 'p': self.p = value
        elif cmd == 'c': self.c = value

    def set_from_file(self, cmd, value):
        """ Set file from directory
        Parameter
        ----------
            cmd(str) : command, 1 of [k, p, c]
            value(str, int) : string or integer

        Value
        -----------
            testFile (file_pointer): open 'value' file
            readFile(str): string of 'value' File

        """
        testFile = open(value, 'r')
        readFile = testFile.readline()
        #print(readFile)

        if cmd == 'k': self.k = readFile
        elif cmd == 'p': self.p = readFile
        elif cmd == 'c': self.c = readFile


    def decrypt(self):
        """ Decrypt cipher file
        Value
        ----------
            ans (str): empty string

        Return
        ----------
            1. (str) : decrypted cipher

        """
        ans = ''
        for x in self.c:
            if x == " " or x == ',' or x == '.':
                ans += x
            else:
                ans += (chr(65 + (ord(x) - 65 - self.k) % 26))
        return ans

if __name__ == "__main__":
    cipher = CipherOld('caesar')
    cipher.set_from_file('c', 'cipher.txt')
    cipher.set_from_value('k', 3) #집어넣는 값을 어떤 값으로 설정할 것인가?
    print(cipher.decrypt())
